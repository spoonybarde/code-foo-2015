
import java.util.Scanner;

public class wordSearch {
	
	public static void main(String[] args) {
		int wordNumber = 0;
		char newWord = 'N';

		char[][] wordSearch = {
				{'O', 'B', 'M', 'K', 'A', 'T', 'A', 'M', 'A', 'R', 'I', 'O', 'C', 'C', 'S', 'F', 'T', 'P', 'H', 'S'},
				{'S', 'M', 'G', 'S', 'W', 'G', 'B', 'O', 'J', 'K', 'O', 'N', 'U', 'U', 'R', 'I', 'I', 'A', 'J', 'D'},
				{'T', 'K', 'H', 'V', 'O', 'O', 'N', 'V', 'X', 'H', 'O', 'D', 'L', 'Z', 'B', 'E', 'L', 'S', 'D', 'O'},
				{'E', 'D', 'I', 'E', 'P', 'O', 'N', 'A', 'Z', 'R', 'E', 'U', 'D', 'L', 'N', 'X', 'E', 'D', 'B', 'C'},
				{'V', 'V', 'Y', 'E', 'S', 'M', 'T', 'I', 'M', 'N', 'C', 'I', 'V', 'E', 'L', 'A', 'B', 'P', 'C', 'B'},
				{'E', 'O', 'C', 'X', 'S', 'B', 'K', 'A', 'S', 'O', 'W', 'B', 'S', 'O', 'R', 'E', 'T', 'S', 'E', 'W'},
				{'S', 'U', 'M', 'I', 'N', 'A', 'N', 'X', 'C', 'T', 'F', 'R', 'I', 'E', 'K', 'P', 'H', 'B', 'K', 'R'},
				{'M', 'S', 'B', 'S', 'T', 'D', 'X', 'S', 'T', 'G', 'K', 'B', 'A', 'R', 'N', 'V', 'U', 'A', 'M', 'I'},
				{'O', 'V', 'G', 'U', 'Y', 'I', 'G', 'K', 'H', 'N', 'B', 'O', 'O', 'P', 'D', 'B', 'V', 'L', 'D', 'R'},
				{'M', 'U', 'P', 'N', 'E', 'K', 'T', 'U', 'P', 'I', 'H', 'K', 'P', 'Y', 'T', 'M', 'E', 'S', 'G', 'M'},
				{'H', 'M', 'Z', 'O', 'G', 'J', 'T', 'A', 'F', 'F', 'N', 'R', 'Q', 'L', 'R', 'U', 'A', 'R', 'U', 'A'},
				{'G', 'L', 'A', 'R', 'O', 'F', 'B', 'R', 'N', 'F', 'C', 'R', 'Z', 'K', 'S', 'K', 'R', 'N', 'G', 'R'},
				{'L', 'G', 'W', 'T', 'J', 'W', 'I', 'U', 'C', 'U', 'A', 'L', 'A', 'Y', 'R', 'N', 'M', 'E', 'A', 'K'},
				{'U', 'Q', 'J', 'A', 'B', 'T', 'A', 'M', 'B', 'L', 'X', 'V', 'A', 'T', 'L', 'Y', 'X', 'V', 'S', 'H'},
				{'R', 'O', 'L', 'P', 'H', 'R', 'R', 'L', 'Y', 'B', 'K', 'J', 'E', 'P', 'T', 'F', 'X', 'L', 'J', 'A'},
				{'E', 'M', 'M', 'Y', 'J', 'O', 'O', 'Z', 'K', 'N', 'F', 'R', 'V', 'N', 'T', 'A', 'E', 'O', 'E', 'M'},
				{'A', 'P', 'Q', 'I', 'D', 'E', 'Z', 'L', 'N', 'E', 'V', 'C', 'A', 'H', 'G', 'R', 'R', 'R', 'L', 'S'},
				{'V', 'M', 'Z', 'R', 'T', 'G', 'Z', 'M', 'I', 'B', 'R', 'N', 'U', 'T', 'A', 'E', 'A', 'D', 'I', 'R'},
				{'E', 'E', 'O', 'N', 'Z', 'I', 'C', 'G', 'L', 'A', 'K', 'S', 'L', 'E', 'S', 'K', 'R', 'P', 'I', 'F'},
				{'R', 'M', 'F', 'A', 'T', 'P', 'Z', 'C', 'B', 'I', 'Z', 'D', 'T', 'A', 'J', 'O', 'F', 'S', 'W', 'S'},
		};
		
		char[][] wordList = {
				{'B', 'L', 'I', 'N', 'K', 'Y'}, 					{'S', 'H', 'I', 'N', 'R', 'A'},
				{'R', 'A', 'P', 'T', 'U', 'R', 'E'}, 				{'A', 'N', 'I', 'M', 'U', 'S'},
				{'F', 'I', 'R', 'E', 'F', 'L', 'Y'}, 				{'W', 'A', 'L', 'K', 'E', 'R', 'S'},
				{'T', 'A', 'R', 'D', 'I', 'S'}, 					{'E', 'P', 'O', 'N', 'A'},
				{'C', 'R', 'E', 'E', 'P', 'E', 'R'}, 				{'A', 'V', 'E', 'N', 'G', 'E', 'R'},
				{'P', 'A', 'T', 'R', 'O', 'N', 'U', 'S'}, 			{'W', 'E', 'S', 'T', 'E', 'R', 'O', 'S'},
				{'I', 'F', 'R', 'I', 'T'}, 							{'A', 'R', 'K', 'H', 'A', 'M'},
				{'V', 'A', 'U', 'L', 'T'}, 							{'C', 'L', 'A', 'P', 'T', 'R', 'A', 'P'},
				{'N', 'O', 'R', 'M', 'A', 'N', 'D', 'Y'}, 			{'R', 'E', 'A', 'V', 'E', 'R'},
				{'H', 'E', 'I', 'S', 'E', 'N', 'B', 'E', 'R', 'G'}, {'S', 'T', 'A', 'R', 'K'},
				{'M', 'O', 'R', 'D', 'O', 'R'}, 					{'B', 'I', 'R', 'D', 'M', 'A', 'N'},
				{'T', 'I', 'T', 'A', 'N'}, 							{'O', 'C', 'U', 'L', 'U', 'S'},
				{'G', 'O', 'O', 'M', 'B', 'A'}, 					{'K', 'A', 'T', 'A', 'M', 'A', 'R', 'I'},
		};
		
		// print empty word search and list of words
		printWordSearch(wordSearch);
		printWordList(wordList);
		
		// ask for word choice
		Scanner input = new Scanner(System.in);
		do {
			System.out.print("Enter the number of the word you wish to find: ");
			do {
				wordNumber = input.nextInt() - 1;
				
				// check that word number is valid
				if (wordNumber < 0 || wordNumber > (wordList.length - 1)) {
					System.out.println();
					System.out.print("Invalid word number. Please enter a number between 1 and " + wordList.length + ": ");
					System.out.println();
				}
				
				// find the word
				else {
					System.out.println();
					findWord(wordSearch, wordList, wordNumber);
					break;
				}
			} while (true);
			
			// ask if user would like to find another word
			System.out.print("Would you like to find another word? (Y/N): ");
			do {
				newWord = input.next().charAt(0);
				
				// check that input is valid
				if (newWord != 'Y' && newWord != 'N' && newWord != 'y' && newWord != 'n') {
					System.out.println();
					System.out.print("Invalid input. Please enter Y or N: ");
					System.out.println();
				}
				else {
					break;
				}
			} while (true);

		} while (newWord == 'Y' || newWord == 'y');
		
		System.out.println("Thanks for playing!");
	}
	
	// display the empty word search
	public static void printWordSearch(char[][] wordSearch) {
		for (int i = 0; i < wordSearch.length; i++) {
			for (int j = 0; j < wordSearch[i].length; j++) {
				System.out.print(" " + wordSearch[i][j]);
			}
			System.out.println();
		}
		System.out.println();
	}
	
	// display the word list
	public static void printWordList(char[][] wordList) {
		System.out.println("           Word List            ");
		for (int i = 0; i < wordList.length; i++) {
			System.out.printf("%2d%2s%-12s", (i + 1), ". ",new String(wordList[i]));
			if ((i + 1) % 2 == 0) {
				System.out.println();
			}
		}
		System.out.println();
	}
	
	// find the word
	public static void findWord(char[][] wordSearch, char[][] wordList, int wordNumber) {
		/* The boolean array is the same size as the word search and is used to store the location
		 * of the word's correct letters. If the word is not where the method was searching, the
		 * boolean array is reinitialized to all false values. */
		boolean[][] wordSearchCorrect = new boolean[wordSearch.length][wordSearch[0].length];
		boolean wordValue = false; // stores true when the word is found and is exit criteria for all loops
		boolean letterValue = false; // stores true when the letter is found
		int row = 0;
		int column = 0;
		int direction = 0; // direction stores where to look for the next letter in the word
		
		// Initializes all boolean values to false
		clearWordSearch(wordSearchCorrect);		
		
		for (int i = 0; i < wordSearch.length; i++) {
			for (int j = 0; j < wordSearch[i].length; j++) {
				if (wordSearch[i][j] == wordList[wordNumber][0]) {
					// the first letter in the word has been found
					row = i;
					column = j;
					wordSearchCorrect[i][j] = true; // marks the first letter's location as true
					
					direction = 0; // reinitializes direction
					do {
						// looks for the direction of the next letter
						direction = findDirection(wordSearch, row, column, wordList[wordNumber][1], direction);
						
						if (direction == 8) {
							// if direction == 8, the next letter was not found
							// exits do-while loop to look in a new location for the first letter
							break;
						}
						
						// the second letter was found
						// now direction is static and the method checks each subsequent letter location
						for (int k = 2; k < wordList[wordNumber].length; k++) {
							// find the new row and column to search for the next letter
							row = findRow(row, direction);
							column = findColumn(column, direction);
							
							// Check for out of bounds
							if (row < 0 || row > (wordSearch.length - 1) || column < 0 || column > (wordSearch[row].length - 1)) {
								// if out of bounds, method still needs to look in other directions around the first letter
								direction++;
								break;
							}
							
							// Check for correct letter
							letterValue = findLetter(wordSearch, row, column, wordList[wordNumber][k], direction);
							wordSearchCorrect[row][column] = letterValue;
							
							// if the next letter was not found
							if (!letterValue) {
								// the method still needs to look in other directions around the first letter
								direction++;
								break;
							}
							
							// checks if k is the last letter in the word
							if (k == wordList[wordNumber].length - 1) {
								// if k is the last letter, the word was found
								// the method sets the last letter as true and breaks the loop
								row = findRow(row, direction);
								column = findColumn(column, direction);
								wordSearchCorrect[row][column] = letterValue;
								wordValue = true;
								break;
							}
						}
						
						if (wordValue) {
							break;
						}
						
						// reinitialize wordSearchCorrect as all false
						else {
							clearWordSearch(wordSearchCorrect);
						}
						
						// reinitialize location to continue search around the first letter
						wordSearchCorrect[i][j] = true;
						row = i;
						column = j;
						
						// if the direction is 8, the word was not found around the first letter
					} while (direction != 8);
					
					if (wordValue) {
						break;
					}
					
					// reinitialize wordSearchCorrect as all false
					else {
						clearWordSearch(wordSearchCorrect);
					}
				}
				if (wordValue) {
					break;
				}
			}
			if (wordValue) {
				break;
			}
		}
					
					
		// print word search with the found word
		// word search displays correct letters with a '*' to their left
		// I'm sure there's a more elegant way to do this but I couldn't figure out how to do it simply
		for (int i = 0; i < wordSearch.length; i++) {
			for (int j = 0; j < wordSearch[i].length; j++) {
				if (wordSearchCorrect[i][j]) {
					System.out.print("*" + wordSearch[i][j]);
				}
				else {
					System.out.print(" " + wordSearch[i][j]);
				}
			}
			System.out.println();
		}
		System.out.println();
	}

	// find the direction of the second letter in relation to the first letter in the word
	// returns 8 if the second letter is not found
	public static int findDirection(char[][] wordSearch, int i, int j, char c, int direction) {
		int directionReturn = 0;
		
		switch (direction) {
		case 0:		if ((i - 1) >= 0 && (j - 1) >= 0 && wordSearch[i - 1][j - 1] == c) {
						return directionReturn = 0;
					}
		case 1:		if ((i - 1) >= 0 && wordSearch[i - 1][j] == c) {
						return directionReturn = 1;
					}
		case 2:		if ((i - 1) >= 0 && (j + 1) <= (wordSearch[i].length -1) && wordSearch[i - 1][j + 1] == c) {
					return directionReturn = 2;
					}
		case 3:		if ((j - 1) >= 0 && wordSearch[i][j - 1] == c) {
						return directionReturn = 3;
					}
		case 4:		if ((j + 1) <= (wordSearch[i].length - 1) && wordSearch[i][j + 1] == c) {
						return directionReturn = 4;
					}
		case 5:		if ((i + 1) <= (wordSearch.length - 1) && (j - 1) >= 0 && wordSearch[i + 1][j - 1] == c) {
						return directionReturn = 5;
					}
		case 6:		if ((i + 1) <= (wordSearch.length - 1) && wordSearch[i + 1][j] == c) {
						return directionReturn = 6;
					}
		case 7:		if ((i + 1) <= (wordSearch.length - 1) && (j + 1) <= (wordSearch[i].length -1) && wordSearch[i + 1][j + 1] == c) {
						return directionReturn = 7;
					}
		default:	return directionReturn = 8;
		}
	}
	
	// uses the direction value to check if the next letter is where it would be expected
 	public static boolean findLetter(char[][] wordSearch, int i, int j, char c, int direction) {
		boolean letter;
		
		switch (direction) {
		case 0: 	if ((i - 1) >= 0 && (j - 1) >= 0 && wordSearch[i - 1][j - 1] == c) {
						return letter = true;
					}
					else {
							return letter = false;
					}
		case 1:		if ((i - 1) >= 0 && wordSearch[i - 1][j] == c) {
						return letter = true;
					}
					else {
						return letter = false;
					}
		case 2: 	if ((i - 1) >= 0 && (j + 1) <= (wordSearch[i].length - 1) && wordSearch[i - 1][j + 1] == c) {
						return letter = true;
					}
					else {
						return letter = false;
					}
		case 3:		if ((j - 1) >= 0 && wordSearch[i][j - 1] == c) {
						return letter = true;
					}
					else {
						return letter = false;
					}
		case 4: 	if ((j + 1) <= (wordSearch[i].length - 1) && wordSearch[i][j + 1] == c) {
						return letter = true;
					}
					else {
						return letter = false;
					}
		case 5:		if ((i + 1) <= (wordSearch.length - 1) && (j - 1) >= 0 && wordSearch[i + 1][j - 1] == c) {
						return letter = true;
					}
					else {
						return letter = false;
					}
		case 6:		if ((i + 1) <= (wordSearch.length - 1) && wordSearch[i + 1][j] == c) {
						return letter = true;
					}
					else {
						return letter = false;
					}
		case 7:		if ((i + 1) <= (wordSearch.length - 1) && (j + 1) <= (wordSearch[i].length - 1) && wordSearch[i + 1][j + 1] == c) {
						return letter = true;
					}
					else {
						return letter = false;
					}
		default:	return letter = false;
		}
	}	 
 	
 	// returns the new row location based on direction
	public static int findRow(int i, int value) {
		int newRow;
		
		switch (value) {
			case 0:
			case 1:
			case 2:		return newRow = i - 1;
			case 3:
			case 4:		return newRow = i;
			case 5:
			case 6:
			case 7:		return newRow = i + 1;
			default: 	return newRow = i;
		} 
	}
	
	// returns the new column location based on direction
	public static int findColumn(int j, int value) {
		int newColumn;
		
		switch (value) {
			case 0:
			case 3:
			case 5:		return newColumn = j - 1;
			case 1:
			case 6:		return newColumn = j;
			case 2:
			case 4:
			case 7:		return newColumn = j + 1;
			default: 	return newColumn = j;
		}
	}
	
	// reinitializes the boolean word search to all false values
	public static void clearWordSearch(boolean[][] wordSearchCorrect) {
		for (int l = 0; l < wordSearchCorrect.length; l++) {
			for (int m = 0; m < wordSearchCorrect[l].length; m++) {
				wordSearchCorrect[l][m] = false;
			}
		}
	}

}
